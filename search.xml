<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【数据结构与算法】链表及相关问题</title>
      <link href="/2019/Structure-and-Algorithm-Linkedlist/"/>
      <url>/2019/Structure-and-Algorithm-Linkedlist/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="http://img.garenhou.com/diagram.jpeg" alt="链表"></p><blockquote><p><strong>链表</strong>(Linked list)相关算法题在面试中很常见，本文将详细介绍链表相对复杂的操作，并用Java语言实现，其中包括：建立带环链表（区别于循环链表）、判断链表是否带环，求得环入口结点及环的长度；判断两个链表是否相交、求得交点；查找倒数第K个结点；反转链表。在LeetCode和剑指Offer中出现的链表问题，基本基于这几个操作。（反正我是一文搞懂啦~）其他简单的操作实现在文后链接中。</p><p><strong>学习目的</strong>：掌握链表相关操作，熟练使用<strong>双指针法</strong>(快慢指针法)</p></blockquote><a id="more"></a><h2 id="一-带环单链表相关问题"><a href="#一-带环单链表相关问题" class="headerlink" title="一. 带环单链表相关问题"></a>一. 带环单链表相关问题</h2><h3 id="1-带环单链表建立"><a href="#1-带环单链表建立" class="headerlink" title="1. 带环单链表建立"></a>1. 带环单链表建立</h3><blockquote><p>看过的解决带环链表问题的文章，都只讨论怎样求得环入口结点和环长度，博主这种渣渣就在想怎么不讲怎么建立带环链表，都没有办法验证……于是自己写了。</p></blockquote><p><strong>代码</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 建立一个带环单链表</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createLoopList</span><span class="params">(Node&lt;E&gt; head)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i;</span><br><span class="line">     Node&lt;E&gt; current = head;</span><br><span class="line">     Node&lt;E&gt; target = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         Node&lt;E&gt; temp = <span class="keyword">new</span> Node(i);</span><br><span class="line">         temp.next = <span class="keyword">null</span>;</span><br><span class="line">         current.next = temp;</span><br><span class="line">         <span class="keyword">this</span>.size++;</span><br><span class="line">         <span class="keyword">if</span> (i == <span class="number">6</span>)</span><br><span class="line">             target = temp;<span class="comment">//指定这个结点为环的第一个结点</span></span><br><span class="line">         current = temp;</span><br><span class="line">     &#125;</span><br><span class="line">     current.next = target;  <span class="comment">//链表末端指向中间的一个结点，这样就创建了一个带环单链表</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="2-判断链表是否带环"><a href="#2-判断链表是否带环" class="headerlink" title="2.判断链表是否带环"></a>2.判断链表是否带环</h3><p><img src="http://img.garenhou.com/diagram.jpeg" alt="带环链表"></p><p><strong>算法思想</strong>：图中是一个带环单链表，这里要区分，循环链表并非这里所讨论的带环单链表。这里判断链表是否带环采用的便是的<strong>双指针法</strong>，之后也会常用到此方法，应用双指针的算法<strong>时间复杂度为O(n)，空间复杂度为O(1)</strong>。双指针法，即设置快慢指针，在判断是否带环时，我们让快指针每次走两个步长（即fast=fast-&gt;next-&gt;next），慢指针每次走一个步长（即slow=slow-&gt;next），这样一来，如果链表带环，则快指针早晚会经过不懈努力再次追赶上慢指针，并且两指针一定在环上相遇。</p><p>&emsp;&emsp;p.s.:也可以通过设置标志位的方法，但是空间复杂度较高。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 判断单链表是否有环(双指针法)--时间复杂度O(n);空间复杂度O(1)[设置标志位空间复杂度大]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Node&lt;E&gt; pre = head.next;</span><br><span class="line">     Node&lt;E&gt; post = head.next;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (pre == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">while</span> (pre != <span class="keyword">null</span> &amp;&amp; pre.next != <span class="keyword">null</span> &amp;&amp; pre.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">         post = post.next;   <span class="comment">//慢指针走一步</span></span><br><span class="line">         pre = pre.next.next;   <span class="comment">//快指针走两步</span></span><br><span class="line">         <span class="keyword">if</span> (pre == post)</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-求环入口结点"><a href="#3-求环入口结点" class="headerlink" title="3.求环入口结点"></a>3.求环入口结点</h3><p><img src="http://img.garenhou.com/LoopList.png" alt="带环链表"></p><p>&emsp;&emsp;找到环的入口结点，仍然使用双指针法，我们设入口结点到头结点距离为e，快慢指针相遇点到头结点距离为m，设环的长度为L，快指针与慢指针相遇时，慢指针走s步，则快指针走2s步，且快指针追上慢指针是在走了n次环的长度之后，则有：$s=e+m$；$2s=e+nL+m$ 所以，$nL=e+m$ ;$e=nL-m$ ; 即得出：<strong>相遇点到入口结点距离=头结点到相遇点距离</strong><br>根据这一结论，当两个指针相遇时，我们让慢指针指回头结点处，快指针仍然指向相遇结点，此时两指针同时前进，每次一步长，这样一来，当他们再次相遇就是在环的入口结点处啦！。时间复杂度O(n)。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 找到环的入口结点：相遇点到连接点的距离=头指针到连接点的距离</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">getEntranceNode</span><span class="params">(Node&lt;E&gt; head)</span> </span>&#123;</span><br><span class="line">     Node&lt;E&gt; pre = head; <span class="comment">//设置两指针同时指向头结点</span></span><br><span class="line">     Node&lt;E&gt; post = head;</span><br><span class="line">     <span class="keyword">if</span> (pre.next == <span class="keyword">null</span> || post.next == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">while</span> (pre.next != <span class="keyword">null</span> &amp;&amp; post.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">         post = post.next;</span><br><span class="line">         pre = pre.next.next;</span><br><span class="line">         <span class="keyword">if</span> (post == pre) &#123;    <span class="comment">//相等，则单链表有环</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     post = head; <span class="comment">//此时,两个指针都在相遇节点处,让一个指针指向头结点处,另一个指向相遇结点</span></span><br><span class="line">     <span class="keyword">while</span> (post != pre) &#123;</span><br><span class="line">         post = post.next; <span class="comment">//两个指针同时前进，最后一定相遇在环入口结点</span></span><br><span class="line">         pre = pre.next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> post; <span class="comment">//环入口结点</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="4-求环的长度"><a href="#4-求环的长度" class="headerlink" title="4.求环的长度"></a>4.求环的长度</h3><p><strong>算法思想</strong>：有了前面的基础，求环的长度就很简单啦，方法就是在找到入口结点的基础上，让一个指针指向入口结点，遍历直到再回到入口结点，走过的长度就是环的长度L。时间复杂度O(n)。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 求环的长度：让指针指向入口节点，遍历直到回到入口节点，走过的长度即环的长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loopLength</span><span class="params">(Node&lt;E&gt; head)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.hasLoop()) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">     Node&lt;E&gt; enter = <span class="keyword">this</span>.getEntranceNode(<span class="keyword">this</span>.getHead());</span><br><span class="line">     Node&lt;E&gt; cur = enter.next;</span><br><span class="line">     <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123; <span class="comment">//从环入口开始再回到环。</span></span><br><span class="line">         length++;</span><br><span class="line">         cur = cur.next;</span><br><span class="line">         <span class="keyword">if</span> (cur == enter) &#123;</span><br><span class="line">             <span class="keyword">return</span> length;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> length;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="二-链表相交问题"><a href="#二-链表相交问题" class="headerlink" title="二. 链表相交问题"></a>二. 链表相交问题</h2><h3 id="1-判断当前链表与目标链表是否相交"><a href="#1-判断当前链表与目标链表是否相交" class="headerlink" title="1. 判断当前链表与目标链表是否相交"></a>1. 判断当前链表与目标链表是否相交</h3><p><img src="http://img.garenhou.com/LoopList.png" alt="带环链表"></p><p>如图，判断两链表是否相交取决于尾结点是否相同，比较容易理解，直接看代码。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> list2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 判断当前链表与目标链表是否相交(相交与否取决于尾节点是否相同)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIntersect</span><span class="params">(LinkedList&lt;E&gt; list2)</span> </span>&#123;</span><br><span class="line">     Node&lt;E&gt; cur1 = head.next;   <span class="comment">// 当前链表</span></span><br><span class="line">     Node&lt;E&gt; cur2 = list2.getHead().next;  <span class="comment">// 目标链表</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 两链表有一个为空，则返回 false</span></span><br><span class="line">     <span class="keyword">if</span> (cur1 == <span class="keyword">null</span> || cur2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历到第一个链表的尾节点</span></span><br><span class="line">     <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">         cur1 = cur1.next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 遍历到第二个链表的尾节点</span></span><br><span class="line">     <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">         cur2 = cur2.next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> cur1 == cur2;  <span class="comment">// 尾节点是否相同</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="2-求相交链表交点"><a href="#2-求相交链表交点" class="headerlink" title="2.求相交链表交点"></a>2.求相交链表交点</h3><p><strong>算法思想</strong></p><ul><li>Brute Force 算法：即遍历第一个链表每个节点时，同时遍历第二个链表，看是否有相同的节点，第一次找到相同的节点即第一个交点。如果第一个链表遍历结束后，还未找到相同的节点，即不存在交点。时间复杂度为$O(n^2)$。效率不高，不作重点讨论。</li><li>引入栈：优化一下，引入栈，以空间换时间。则需要创建两个栈来分别存储两个链表的结点，遍历过的结点入栈，入栈结束后，通过判断结点是否相等来判断是否相交，相等的结点即为交点。引入栈，空间复杂度较高，但比较简便。</li><li>根据链表长度： 再优化一下，通过获得两个链表的长度后，我们比较两个链表哪一个长，设较长的链表长度为len1，短的链表长度为len2。先让较长的链表向后移动(len1-len2)个步，然后从当前位置同时遍历两个链表，当遍历到的链表的节点相同时，则这个结点就是交点。时间复杂度O(n)，空间复杂度O(1)。</li></ul><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 返回两链表的交点(若不相交，返回null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">getIntersectionPoint</span><span class="params">(LinkedList&lt;E&gt; list2)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; cur1 = head.next;</span><br><span class="line">        Node&lt;E&gt; cur2 = list2.getHead().next;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isIntersect(list2)) &#123;</span><br><span class="line">            <span class="keyword">int</span> step = Math.abs(<span class="keyword">this</span>.size - list2.size);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.size &gt; list2.size) &#123;</span><br><span class="line">                <span class="keyword">while</span> (step &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cur1 = cur1.next;</span><br><span class="line">                    step--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.size &lt; list2.size) &#123;</span><br><span class="line">                <span class="keyword">while</span> (step &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cur2 = cur2.next;</span><br><span class="line">                    step--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="三-查找指定结点"><a href="#三-查找指定结点" class="headerlink" title="三.查找指定结点"></a>三.查找指定结点</h2><h3 id="1-查找倒数第K个结点"><a href="#1-查找倒数第K个结点" class="headerlink" title="1.查找倒数第K个结点"></a>1.查找倒数第K个结点</h3><p><strong>算法思想</strong>：在不知道链表长度的情况下，查找单链表中倒数第K个结点元素，又用到本文绝对主角—双指针法，具体操作为：让快指针先走K-1个步长，慢指针停留在头结点处，当快指针走到链表末端时，慢指针所指向的刚好就是倒数第K个结点。时间复杂度O(n)，空间复杂度O(1)。（很容易理解吧</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 找出单链表中倒数第K个元素(前提 : 不知道size ; 双指针法, 相差K - 1步) --------------------时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">getKthFromEnd</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">     Node&lt;E&gt; pre = head.next;</span><br><span class="line">     Node&lt;E&gt; post = head.next;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123; <span class="comment">// pre先走k-1步</span></span><br><span class="line">         <span class="keyword">if</span> (pre != <span class="keyword">null</span>) &#123;</span><br><span class="line">             pre = pre.next;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (pre != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 当pre走到链表末端时，post正好指向倒数第K个节点</span></span><br><span class="line">         <span class="keyword">while</span> (pre != <span class="keyword">null</span> &amp;&amp; pre.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">             pre = pre.next;</span><br><span class="line">             post = post.next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> post;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-查找链表中间结点"><a href="#2-查找链表中间结点" class="headerlink" title="2.查找链表中间结点"></a>2.查找链表中间结点</h4><p><strong>算法思想</strong>：同样还是双指针法，我们让快慢指针同时出发，快指针一次走两个步长，慢指针走一个步长，当快指针走到链表末端(或下一个、下下个结点为末端)时，慢指针所指向的结点就是中间结点。如果快指针下一结点就是末端，则说明链表长度为偶数，则慢指针当前位置的下一个结点为中间结点。时间复杂度O(n)，空间复杂度O(1)。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span> 寻找单链表中的中间节点(双指针法)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMiddleNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Node&lt;E&gt; index1 = head.next; <span class="comment">// 慢指针</span></span><br><span class="line">      Node&lt;E&gt; index2 = head.next; <span class="comment">// 快指针</span></span><br><span class="line">      <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">          System.out.println(index1.data);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (index2 != <span class="keyword">null</span> &amp;&amp; index2.next != <span class="keyword">null</span></span><br><span class="line">              &amp;&amp; index2.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">          index1 = index1.next;</span><br><span class="line">          index2 = index2.next.next;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"链表中间结点为："</span> + index1.data); <span class="comment">// 第一个中间节点</span></span><br><span class="line">      <span class="keyword">if</span> (index2.next != <span class="keyword">null</span>) &#123; <span class="comment">// 当链表长度为偶数时，打印第二个中间节点</span></span><br><span class="line">          System.out.println(<span class="string">"链表中间结点为："</span> + index1.next.data);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="四-反转链表"><a href="#四-反转链表" class="headerlink" title="四.反转链表"></a>四.反转链表</h2><p>理解起来很简单，见代码</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 反转链表（利用前后指针，每个结点的next都要更新）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"反转后链表为: "</span>);</span><br><span class="line">    Node&lt;E&gt; cur = head.next; <span class="comment">// 原链表</span></span><br><span class="line">    Node&lt;E&gt; pre = <span class="keyword">null</span>; <span class="comment">// 反转后的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123; <span class="comment">// 对原链表中的每个结点进行反转</span></span><br><span class="line">        Node&lt;E&gt; next = cur.next;  <span class="comment">//记录当前结点的下一个结点</span></span><br><span class="line">        cur.next = pre; <span class="comment">//更新当前结点的next</span></span><br><span class="line">        pre = cur; <span class="comment">//pre后移</span></span><br><span class="line">        cur = next; <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    head.next = pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>本文全部代码： 见<em><a href="https://github.com/Garen2994/DataStructure-Demo/tree/master/src/garen/demo/Linkedlist" target="_blank" rel="noopener">GitHub</a></em></p><blockquote><p><em>不断优化就是算法的魅力所在，通过总结更加能够理解算法的优化思想，在链表问题中，双指针法起到了很大的作用，两个指针，不同使用方法，就可以用出“神奇的”效果。每当遇到这些类似问题，先想一想双指针法能不能用，去思考，去优化，算法，是 优化 的艺术。</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Structure and algorithm </category>
          
          <category> Linked list </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and algorithm </tag>
            
            <tag> Linked list </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
